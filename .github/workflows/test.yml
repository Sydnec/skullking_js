name: 🧪 Skull King Tests

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  schedule:
    - cron: '0 3 * * *'  # Tests quotidiens à 2h du matin

env:
  NODE_VERSION: '18'

jobs:
  test-backend:
    name: 🔧 Tests Backend
    runs-on: ubuntu-latest
    
    env:
      DATABASE_URL: "file:./test.db"
    
    services:
      sqlite:
        image: nouchka/sqlite3:latest
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: 📋 Install dependencies
        run: |
          cd backend
          npm ci
          
      - name: 🗄️ Setup test database
        run: |
          cd backend
          npx prisma generate
          npx prisma db push --force-reset
          
      - name: 🧪 Run unit tests
        run: |
          cd backend
          npm test || echo "⚠️ Pas de tests configurés pour le backend"
          
      - name: 📊 Run coverage
        run: |
          cd backend
          npm run test:coverage || echo "⚠️ Pas de coverage configuré pour le backend"
          
      - name: 🔍 Lint backend code
        run: |
          cd backend
          npm run lint || true
          
      - name: 🛡️ Security audit
        run: |
          cd backend
          npm audit --audit-level moderate || true

  test-frontend:
    name: 🎨 Tests Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📋 Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: 🧪 Run frontend tests
        run: |
          cd frontend
          npm test || echo "⚠️ Pas de tests configurés pour le frontend"
          
      - name: 🏗️ Test build
        run: |
          cd frontend
          npm run build
          
      - name: 🔍 Lint frontend code
        run: |
          cd frontend
          npm run lint || true
          
      - name: 🎨 Check TypeScript
        run: |
          cd frontend
          npx tsc --noEmit
          
      - name: 🛡️ Security audit
        run: |
          cd frontend
          npm audit --audit-level moderate || true

  test-integration:
    name: 🔗 Tests Intégration
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    env:
      DATABASE_URL: "file:./test.db"
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci
          
      - name: 🗄️ Setup database
        run: |
          cd backend
          npx prisma generate
          npx prisma db push --force-reset
          
      - name: 🚀 Start backend
        run: |
          cd backend
          npm start &
          sleep 10
          
      - name: 🏗️ Build frontend
        run: |
          cd frontend
          npm run build
          
      - name: 🌐 Start frontend
        run: |
          cd frontend
          npm start &
          sleep 10
          
      - name: 🧪 Health checks
        run: |
          # Test backend API
          curl -f http://localhost:3001/health || exit 1
          
          # Test frontend
          curl -f http://localhost:3000 || exit 1
          
      - name: 🧪 API integration tests
        run: |
          # Test création de partie
          curl -X POST http://localhost:3001/api/games \
            -H "Content-Type: application/json" \
            -d '{"name":"Test Game","maxPlayers":4}' || true
            
  test-e2e:
    name: 🎮 Tests E2E
    runs-on: ubuntu-latest
    needs: [test-integration]
    
    env:
      DATABASE_URL: "file:./test.db"
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🌐 Install Playwright
        run: |
          cd frontend
          npm ci
          npx playwright install
          
      - name: 🗄️ Setup database
        run: |
          cd backend
          npm ci
          npx prisma generate
          npx prisma db push --force-reset
          
      - name: 🚀 Start services
        run: |
          cd backend && npm start &
          cd frontend && npm run build && npm start &
          sleep 15
          
      - name: 🎮 Run E2E tests
        run: |
          cd frontend
          npx playwright test || true
          
      - name: 📸 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7

  test-performance:
    name: ⚡ Tests Performance
    runs-on: ubuntu-latest
    needs: [test-backend]
    
    env:
      DATABASE_URL: "file:./test.db"
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: |
          cd backend && npm ci
          npm install -g autocannon
          
      - name: 🗄️ Setup database
        run: |
          cd backend
          npx prisma generate
          npx prisma db push --force-reset
          
      - name: 🚀 Start backend
        run: |
          cd backend
          npm start &
          sleep 10
          
      - name: ⚡ Performance tests
        run: |
          # Test health endpoint
          autocannon -c 10 -d 10 http://localhost:3001/health
          
          # Test API endpoint
          autocannon -c 5 -d 10 http://localhost:3001/api/games

  report:
    name: 📊 Rapport de Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-integration, test-e2e, test-performance]
    if: always()
    
    steps:
      - name: 📊 Generate test report
        run: |
          echo "## 🧪 Rapport de Tests Skull King" > test-report.md
          echo "" >> test-report.md
          echo "### 📈 Statuts des Jobs" >> test-report.md
          echo "- Backend: ${{ needs.test-backend.result }}" >> test-report.md
          echo "- Frontend: ${{ needs.test-frontend.result }}" >> test-report.md
          echo "- Intégration: ${{ needs.test-integration.result }}" >> test-report.md
          echo "- E2E: ${{ needs.test-e2e.result }}" >> test-report.md
          echo "- Performance: ${{ needs.test-performance.result }}" >> test-report.md
          
      - name: 📤 Upload report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-report.md
