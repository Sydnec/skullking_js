#!/bin/bash

# 🏴‍☠️ Skull King - Script de gestion unifié
# Usage: sk [command]

# Auto-détection du répertoire du projet
# Si le script est dans /usr/local/bin, on utilise le répertoire courant
# Sinon, on utilise le répertoire du script
if [[ "${BASH_SOURCE[0]}" == "/usr/local/bin/sk" ]]; then
    PROJECT_DIR="$(pwd)"
else
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    PROJECT_DIR="$SCRIPT_DIR"
fi

BACKEND_DIR="$PROJECT_DIR/backend"
FRONTEND_DIR="$PROJECT_DIR/frontend"
LOG_DIR="$BACKEND_DIR/logs"

# Validation du répertoire de projet
validate_project_directory() {
    if [[ ! -d "$BACKEND_DIR" ]] || [[ ! -d "$FRONTEND_DIR" ]]; then
        print_error "Ce répertoire ne semble pas être un projet Skull King valide."
        print_error "Répertoires attendus :"
        print_error "  - Backend: $BACKEND_DIR"
        print_error "  - Frontend: $FRONTEND_DIR"
        print_error ""
        print_error "Assurez-vous d'être dans le répertoire racine du projet ou que les répertoires existent."
        exit 1
    fi
}

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

print_section() {
    echo -e "${CYAN}📊 $1${NC}"
    echo "----------------------------"
}

print_step() {
    echo -e "${GREEN}[ÉTAPE]${NC} $1"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Fonction pour vérifier si l'application est en ligne
check_app_status() {
    if pm2 list 2>/dev/null | grep -q "skullking-backend.*online"; then
        return 0
    else
        return 1
    fi
}

# Fonction de monitoring complète
monitor_function() {
    clear
    echo -e "${PURPLE}🏴‍☠️ SKULL KING - MONITORING${NC}"
    echo "================================="
    echo ""
    
    # 1. Statut PM2
    print_section "Statut PM2"
    if pm2 list 2>/dev/null | grep -q "skullking-backend"; then
        pm2 list
        echo ""
        if check_app_status; then
            print_success "Backend Skull King en ligne"
        else
            print_error "Backend Skull King hors ligne"
        fi
    else
        print_error "Aucun processus PM2 trouvé"
    fi
    echo ""

    # 2. Test de l'API
    print_section "Test de l'API"
    if curl -s http://localhost:3001/health >/dev/null 2>&1; then
        print_success "API accessible"
        echo "Réponse: $(curl -s http://localhost:3001/health)"
    else
        print_error "API non accessible"
    fi
    echo ""

    # 3. Ressources système
    print_section "Ressources système"
    echo "💾 Mémoire: $(free -h | awk '/^Mem:/ {printf "Utilisée: %s/%s (%.2f%%)", $3, $2, ($3/$2)*100}')"
    echo "🔥 CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//')% utilisé"
    echo "💿 Disque: $(df -h / | awk 'NR==2 {printf "Utilisé: %s/%s (%s)", $3, $2, $5}')"
    echo ""

    # 4. Connectivité réseau
    print_section "Connectivité réseau"
    echo "🌐 IP locale: $(hostname -I | awk '{print $1}' 2>/dev/null || ipconfig getifaddr en0 2>/dev/null || echo "Non disponible")"
    if ss -tuln 2>/dev/null | grep -q ":3001 " || netstat -an 2>/dev/null | grep -q ":3001.*LISTEN"; then
        print_success "Port 3001 (Backend) ouvert et en écoute"
    else
        print_error "Port 3001 (Backend) non accessible"
    fi
    echo ""

    # 5. Logs récents
    print_section "Logs récents (dernières 5 lignes)"
    pm2 logs skullking-backend --lines 5 --nostream 2>/dev/null || echo "Aucun log disponible"
    echo ""

    # 6. Informations de déploiement
    print_section "Informations de déploiement"
    if [ -f "$FRONTEND_DIR/.next/BUILD_ID" ]; then
        echo "📅 Dernière mise à jour du build frontend: $(stat -c %y "$FRONTEND_DIR/.next/BUILD_ID" 2>/dev/null || stat -f %Sm "$FRONTEND_DIR/.next/BUILD_ID" 2>/dev/null || echo "Non disponible")"
    fi
    echo "📁 Répertoire projet: $PROJECT_DIR"
    echo "📁 Backend: $BACKEND_DIR"
    echo "📁 Frontend: $FRONTEND_DIR"
    echo "👤 Utilisateur: $(whoami)"
    echo "🖥️  Hostname: $(hostname)"
    echo ""
    echo "🔄 Pour actualiser: sk monitor"
    echo "📊 Pour PM2 monitoring: pm2 monit"
    echo "📋 Pour redémarrer: sk restart"
}

# Fonction de mise à jour
update_function() {
    cd "$PROJECT_DIR" || {
        print_error "Impossible d'accéder au répertoire $PROJECT_DIR"
        exit 1
    }

    print_step "🔄 Mise à jour Skull King..."
    
    # Sauvegarde des logs
    print_step "Sauvegarde des logs actuels..."
    if [ -f "$LOG_DIR/combined.log" ]; then
        cp "$LOG_DIR/combined.log" "$LOG_DIR/combined.log.backup.$(date +%Y%m%d_%H%M%S)"
    fi

    # Vérifier et arrêter PM2 si nécessaire
    print_step "📋 Vérification du statut PM2..."
    if pm2 describe skullking-backend &> /dev/null; then
        print_step "✅ Processus PM2 'skullking-backend' trouvé"
        print_step "Arrêt temporaire de l'application..."
        pm2 stop skullking-backend
    else
        print_warning "⚠️ Processus PM2 'skullking-backend' non trouvé"
    fi

    # Sauvegarde de la base de données
    print_step "Sauvegarde de la base de données..."
    if [ -f "$BACKEND_DIR/prisma/dev.db" ]; then
        cp "$BACKEND_DIR/prisma/dev.db" "$BACKEND_DIR/prisma/dev.db.backup.$(date +%Y%m%d_%H%M%S)"
    fi

    # Git pull
    print_step "Récupération des dernières modifications..."
    git pull origin main || print_warning "Impossible de faire git pull"

    # Installation des dépendances backend
    print_step "Installation des dépendances backend..."
    cd "$BACKEND_DIR"
    npm i

    # Retour au backend pour Prisma
    cd "$BACKEND_DIR"

    # Génération Prisma
    print_step "Génération du client Prisma..."
    npx prisma generate

    # Migration de la base de données
    print_step "Migration de la base de données..."
    NODE_ENV=production npx prisma db push

    # Redémarrage
    print_step "Redémarrage de l'application..."
    pm2 restart skullking-backend || pm2 start ecosystem.config.js --env production
    pm2 save

    # Vérification finale
    sleep 5
    if check_app_status; then
        print_success "🎉 Mise à jour terminée avec succès!"
        print_success "Le backend est en ligne sur http://localhost:3001"
        print_success "Le frontend peut être déployé séparément"
    else
        print_error "❌ Problème lors de la mise à jour"
        echo "Vérifiez les logs avec: sk logs"
    fi
}

case "$1" in
    dev)
        validate_project_directory
        echo "🚀 Lancement du mode développement..."
        echo "Backend sur http://localhost:3001"
        echo "Frontend sur http://localhost:3000"
        echo ""
        print_step "Démarrage du backend..."
        cd "$BACKEND_DIR"
        npm run dev &
        BACKEND_PID=$!
        
        print_step "Démarrage du frontend..."
        cd "$FRONTEND_DIR"
        npm run dev &
        FRONTEND_PID=$!
        
        echo ""
        print_success "Développement démarré!"
        echo "Appuyez sur Ctrl+C pour arrêter les deux serveurs"
        
        # Attendre l'interruption et tuer les processus
        trap 'echo ""; print_step "Arrêt des serveurs..."; kill $BACKEND_PID $FRONTEND_PID 2>/dev/null; print_success "Serveurs arrêtés"; exit 0' INT
        wait
        ;;
    build)
        validate_project_directory
        echo "🏗️ Construction du frontend..."
        cd "$FRONTEND_DIR"
        print_step "Installation des dépendances..."
        npm i
        print_step "Build en cours..."
        npm run build
        if [ $? -eq 0 ]; then
            print_success "Frontend buildé avec succès!"
            print_success "Prêt pour le déploiement"
        else
            print_error "Erreur lors du build"
        fi
        ;;
    start)
        validate_project_directory
        echo "🚀 Démarrage de Skull King Backend..."
        cd "$BACKEND_DIR"
        pm2 start ecosystem.config.js --env production 2>/dev/null || {
            print_warning "Processus déjà en cours, tentative de redémarrage..."
            pm2 restart skullking-backend
        }
        pm2 save
        sleep 2
        if check_app_status; then
            print_success "Backend Skull King démarré avec succès"
            print_success "Backend accessible sur http://localhost:3001"
        else
            print_error "Échec du démarrage"
        fi
        ;;
    stop)
        echo "🛑 Arrêt de Skull King Backend..."
        pm2 stop skullking-backend 2>/dev/null || print_warning "Application déjà arrêtée"
        print_success "Backend Skull King arrêté"
        ;;
    restart)
        echo "🔄 Redémarrage de Skull King Backend..."
        cd "$BACKEND_DIR"
        pm2 restart skullking-backend 2>/dev/null || {
            print_warning "Processus non trouvé, démarrage..."
            pm2 start ecosystem.config.js --env production
        }
        pm2 save
        sleep 2
        if check_app_status; then
            print_success "Backend Skull King redémarré avec succès"
        else
            print_error "Échec du redémarrage"
        fi
        ;;
    status)
        if check_app_status; then
            print_success "Backend Skull King en ligne"
        else
            print_error "Backend Skull King hors ligne"
        fi
        ;;
    logs)
        echo "📋 Logs du Backend Skull King en temps réel (Ctrl+C pour arrêter):"
        echo "=========================================================="
        pm2 logs skullking-backend 2>/dev/null || print_error "Impossible d'accéder aux logs"
        ;;
    monitor)
        monitor_function
        ;;
    update)
        update_function
        ;;
    deploy)
        echo "🚀 Déploiement backend..."
        cd "$PROJECT_DIR"
        
        # Vérification et création du fichier .env backend
        print_step "Vérification de la configuration d'environnement backend..."
        cd "$BACKEND_DIR"
        if [ ! -f ".env" ]; then
            if [ -f ".env.example" ]; then
                print_step "Copie de .env.example vers .env..."
                cp .env.example .env
                print_success "Fichier .env créé à partir de .env.example"
            else
                print_warning "Ni .env ni .env.example trouvés dans le backend"
            fi
        else
            print_success "Fichier .env déjà présent dans le backend"
        fi
        
        # Arrêt de l'application
        print_step "Arrêt de l'application si elle est en cours d'exécution..."
        pm2 stop skullking-backend 2>/dev/null || echo "Backend pas encore démarré"

        # Installation des dépendances backend
        print_step "Installation des dépendances backend..."
        cd "$BACKEND_DIR"
        npm i

        # Génération du client Prisma
        print_step "Génération du client Prisma..."
        npx prisma generate

        # Initialisation de la base de données
        print_step "Initialisation de la base de données de production..."
        NODE_ENV=production npx prisma db push

        # Démarrage du backend avec PM2
        print_step "Démarrage du backend avec PM2..."
        cd "$BACKEND_DIR"
        pm2 start ecosystem.config.js --env production

        # Sauvegarde de la configuration PM2
        print_step "Sauvegarde de la configuration PM2..."
        pm2 save

        # Vérification finale
        sleep 5
        if check_app_status; then
            print_success "🎉 Déploiement backend terminé avec succès!"
            print_success "Backend accessible sur http://localhost:3001"
            print_success "Le frontend peut être déployé séparément"
        else
            print_error "❌ Problème lors du déploiement"
        fi
        ;;
    deploy-full)
        echo "🚀 Déploiement complet (backend + frontend)..."
        cd "$PROJECT_DIR"
        
        # Vérification et création du fichier .env backend
        print_step "Vérification de la configuration d'environnement backend..."
        cd "$BACKEND_DIR"
        if [ ! -f ".env" ]; then
            if [ -f ".env.example" ]; then
                print_step "Copie de .env.example vers .env..."
                cp .env.example .env
                print_success "Fichier .env créé à partir de .env.example"
            else
                print_warning "Ni .env ni .env.example trouvés dans le backend"
            fi
        else
            print_success "Fichier .env déjà présent dans le backend"
        fi
        
        # Vérification et création du fichier .env frontend
        print_step "Vérification de la configuration d'environnement frontend..."
        cd "$FRONTEND_DIR"
        if [ ! -f ".env.local" ]; then
            if [ -f ".env.example" ]; then
                print_step "Copie de .env.example vers .env.local..."
                cp .env.example .env.local
                print_success "Fichier .env.local créé à partir de .env.example"
            else
                print_warning "Ni .env.local ni .env.example trouvés dans le frontend"
            fi
        else
            print_success "Fichier .env.local déjà présent dans le frontend"
        fi
        
        # Arrêt de l'application
        print_step "Arrêt de l'application si elle est en cours d'exécution..."
        pm2 stop skullking-backend 2>/dev/null || echo "Backend pas encore démarré"

        # Installation des dépendances backend
        print_step "Installation des dépendances backend..."
        cd "$BACKEND_DIR"
        npm i

        # Génération du client Prisma
        print_step "Génération du client Prisma..."
        npx prisma generate

        # Initialisation de la base de données
        print_step "Initialisation de la base de données de production..."
        NODE_ENV=production npx prisma db push

        # Installation des dépendances frontend
        print_step "Installation des dépendances frontend..."
        cd "$FRONTEND_DIR"
        npm i

        # Build du frontend
        print_step "Construction du frontend..."
        npm run build

        # Démarrage du backend avec PM2
        print_step "Démarrage du backend avec PM2..."
        cd "$BACKEND_DIR"
        pm2 start ecosystem.config.js --env production

        # Sauvegarde de la configuration PM2
        print_step "Sauvegarde de la configuration PM2..."
        pm2 save

        # Vérification finale
        sleep 5
        if check_app_status; then
            print_success "🎉 Déploiement complet terminé avec succès!"
            print_success "Backend accessible sur http://localhost:3001"
            print_success "Frontend buildé et prêt à être déployé"
        else
            print_error "❌ Problème lors du déploiement"
        fi
        ;;
    api)
        echo "🏥 Vérification de la santé de l'application..."
        if curl -s http://localhost:3001/health >/dev/null 2>&1; then
            print_success "API accessible"
            echo "Réponse: $(curl -s http://localhost:3001/health)"
        else
            print_error "API non accessible"
        fi
        ;;
    reset)
        # Vérifier si l'option --y ou -y est présente
        auto_confirm=false
        if [[ "$2" == "--y" ]] || [[ "$2" == "-y" ]]; then
            auto_confirm=true
        fi
        
        echo "🔄 Réinitialisation complète du projet..."
        echo ""
        echo -e "${YELLOW}⚠️  ATTENTION: Cette action va supprimer toutes les données!${NC}"
        echo -e "${YELLOW}⚠️  Les utilisateurs, salles de jeu et parties seront perdues!${NC}"
        echo ""
        
        if [ "$auto_confirm" = true ]; then
            echo "Mode automatique activé (--y), confirmation ignorée"
            confirmation="o"
        else
            echo -n "Êtes-vous sûr de vouloir continuer? (O/n): "
            read -n 1 confirmation
            echo ""
        fi
        
        if [[ "$confirmation" =~ ^[Oo]$ ]] || [ -z "$confirmation" ]; then
            cd "$PROJECT_DIR" || {
                print_error "Impossible d'accéder au répertoire $PROJECT_DIR"
                exit 1
            }

            # Suppression des logs
            print_step "Suppression des logs..."
            if [ -d "$LOG_DIR" ]; then
                rm -rf "$LOG_DIR"
                mkdir -p "$LOG_DIR"
                touch "$LOG_DIR/combined.log"
                touch "$LOG_DIR/error.log"
                touch "$LOG_DIR/out.log"
                print_success "Logs supprimés et répertoire recréé"
            else
                print_warning "Répertoire de logs non trouvé, création d'un nouveau"
                mkdir -p "$LOG_DIR"
            fi

            # Suppression de la base de données
            print_step "Suppression de la base de données..."
            if [ -f "$BACKEND_DIR/prisma/dev.db" ]; then
                rm -f "$BACKEND_DIR/prisma/dev.db"
                print_success "Base de données supprimée"
            fi

            # Arrêt et suppression du processus PM2
            print_step "Arrêt du processus PM2..."
            pm2 stop skullking-backend 2>/dev/null || echo "Processus déjà arrêté"
            pm2 delete skullking-backend 2>/dev/null || echo "Processus non trouvé"

            # Réinitialisation de la base de données
            print_step "Réinitialisation de la base de données..."
            cd "$BACKEND_DIR"
            npx prisma db push --force-reset

            # Redémarrage
            print_step "Redémarrage de l'application..."
            pm2 start ecosystem.config.js --env production
            pm2 save
            
            sleep 2
            if check_app_status; then
                print_success "Projet réinitialisé et prêt à utiliser"
                print_success "Backend accessible sur http://localhost:3001"
            else
                print_error "Erreur lors de la réinitialisation"
            fi
        else
            print_warning "Réinitialisation annulée"
        fi
        ;;
    *)
        echo -e "${PURPLE}🏴‍☠️ SKULL KING - Script de gestion unifié${NC}"
        echo "============================================="
        echo ""
        echo "Usage: sk [commande]"
        echo ""
        echo "Commandes disponibles:"
        echo ""
        echo "  start         - Démarre le backend"
        echo "  stop          - Arrête le backend"
        echo "  restart       - Redémarre le backend"
        echo "  status        - Affiche le statut du backend"
        echo "  logs          - Affiche les logs PM2 du backend en temps réel"
        echo "  monitor       - Monitoring complet avec ressources système"
        echo "  deploy        - Déploiement backend uniquement (recommandé)"
        echo "  deploy-full   - Déploiement backend + build frontend"
        echo "  update        - Mise à jour du backend"
        echo "  api           - Vérifie la santé de l'API backend"
        echo "  dev           - Lance le développement (backend + frontend)"
        echo "  build         - Build le frontend uniquement"
        echo "  reset         - Réinitialise complètement le projet (⚠️ SUPPRIME TOUTES LES DONNÉES)"
        echo "                  Options: --y ou -y pour confirmer automatiquement"
        echo ""
        echo "Architecture:"
        echo "  📁 Backend : Port 3001 (API + Socket.IO)"
        echo "  📁 Frontend: Port 3000 (Next.js - dev) ou déployé séparément"
        echo ""
        exit 1
        ;;
esac
