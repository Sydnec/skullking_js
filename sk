#!/bin/bash

# üè¥‚Äç‚ò†Ô∏è Skull King - Script de gestion unifi√©
# Usage: sk [command]

# Auto-d√©tection du r√©pertoire du projet
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="/home/sydnec/skullking_js"
LOG_DIR="$PROJECT_DIR/logs"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

print_section() {
    echo -e "${CYAN}üìä $1${NC}"
    echo "----------------------------"
}

print_step() {
    echo -e "${GREEN}[√âTAPE]${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fonction pour v√©rifier si l'application est en ligne
check_app_status() {
    if pm2 list 2>/dev/null | grep -q "skullking.*online"; then
        return 0
    else
        return 1
    fi
}

# Fonction de monitoring compl√®te
monitor_function() {
    clear
    echo -e "${PURPLE}üè¥‚Äç‚ò†Ô∏è SKULL KING - MONITORING${NC}"
    echo "================================="
    echo ""
    
    # 1. Statut PM2
    print_section "Statut PM2"
    if pm2 list 2>/dev/null | grep -q "skullking"; then
        pm2 list
        echo ""
        if check_app_status; then
            print_success "Application Skull King en ligne"
        else
            print_error "Application Skull King hors ligne"
        fi
    else
        print_error "Aucun processus PM2 trouv√©"
    fi
    echo ""

    # 2. Test de l'API
    print_section "Test de l'API"
    if curl -s http://localhost:3000/api/health >/dev/null 2>&1; then
        print_success "API accessible"
        echo "R√©ponse: $(curl -s http://localhost:3000/api/health)"
    else
        print_error "API non accessible"
    fi
    echo ""

    # 3. Ressources syst√®me
    print_section "Ressources syst√®me"
    echo "üíæ M√©moire: $(free -h | awk '/^Mem:/ {printf "Utilis√©e: %s/%s (%.2f%%)", $3, $2, ($3/$2)*100}')"
    echo "üî• CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//')% utilis√©"
    echo "üíø Disque: $(df -h / | awk 'NR==2 {printf "Utilis√©: %s/%s (%s)", $3, $2, $5}')"
    echo ""

    # 4. Connectivit√© r√©seau
    print_section "Connectivit√© r√©seau"
    echo "üåê IP locale: $(hostname -I | awk '{print $1}')"
    if ss -tuln | grep -q ":3000 "; then
        print_success "Port 3000 ouvert et en √©coute"
    else
        print_error "Port 3000 non accessible"
    fi
    echo ""

    # 5. Logs r√©cents
    print_section "Logs r√©cents (derni√®res 5 lignes)"
    pm2 logs skullking --lines 5 --nostream 2>/dev/null || echo "Aucun log disponible"
    echo ""

    # 6. Informations de d√©ploiement
    print_section "Informations de d√©ploiement"
    if [ -f "$PROJECT_DIR/.next/BUILD_ID" ]; then
        echo "üìÖ Derni√®re mise √† jour du build: $(stat -c %y "$PROJECT_DIR/.next/BUILD_ID" 2>/dev/null || echo "Non disponible")"
    fi
    echo "üìÅ R√©pertoire: $PROJECT_DIR"
    echo "üë§ Utilisateur: $(whoami)"
    echo "üñ•Ô∏è  Hostname: $(hostname)"
    echo ""
    echo "üîÑ Pour actualiser: sk monitor"
    echo "üìä Pour PM2 monitoring: pm2 monit"
    echo "üìã Pour red√©marrer: sk restart"
}

# Fonction de mise √† jour
update_function() {
    cd "$PROJECT_DIR" || {
        print_error "Impossible d'acc√©der au r√©pertoire $PROJECT_DIR"
        exit 1
    }

    print_step "üîÑ Mise √† jour Skull King..."
    
    # Sauvegarde des logs
    print_step "Sauvegarde des logs actuels..."
    if [ -f "./logs/combined.log" ]; then
        cp ./logs/combined.log "./logs/combined.log.backup.$(date +%Y%m%d_%H%M%S)"
    fi

    # V√©rifier et arr√™ter PM2 si n√©cessaire
    print_step "üìã V√©rification du statut PM2..."
    if pm2 describe skullking &> /dev/null; then
        print_step "‚úÖ Processus PM2 'skullking' trouv√©"
        print_step "Arr√™t temporaire de l'application..."
        pm2 stop skullking
    else
        print_warning "‚ö†Ô∏è Processus PM2 'skullking' non trouv√©"
    fi

    # Sauvegarde de la base de donn√©es
    print_step "Sauvegarde de la base de donn√©es..."
    if [ -f "./prisma/db/production.db" ]; then
        cp "./prisma/db/production.db" "./prisma/db/production.db.backup.$(date +%Y%m%d_%H%M%S)"
    fi

    # Git pull
    print_step "R√©cup√©ration des derni√®res modifications..."
    git pull origin main || print_warning "Impossible de faire git pull"

    # Installation des d√©pendances
    print_step "Installation des d√©pendances..."
    npm ci --production

    # Build de l'application
    print_step "Construction de l'application..."
    npm run build

    # G√©n√©ration Prisma
    print_step "G√©n√©ration du client Prisma..."
    npx prisma generate

    # Migration de la base de donn√©es
    print_step "Migration de la base de donn√©es..."
    NODE_ENV=production npx prisma db push

    # Red√©marrage
    print_step "Red√©marrage de l'application..."
    pm2 restart skullking || pm2 start ecosystem.config.js --env production
    pm2 save

    # V√©rification finale
    sleep 5
    if check_app_status; then
        print_success "üéâ Mise √† jour termin√©e avec succ√®s!"
        print_success "L'application est en ligne sur http://localhost:3000"
    else
        print_error "‚ùå Probl√®me lors de la mise √† jour"
        echo "V√©rifiez les logs avec: sk logs"
    fi
}

case "$1" in
    start)
        echo "üöÄ D√©marrage de Skull King..."
        cd "$PROJECT_DIR"
        pm2 start ecosystem.config.js --env production 2>/dev/null || {
            print_warning "Processus d√©j√† en cours, tentative de red√©marrage..."
            pm2 restart skullking
        }
        pm2 save
        sleep 2
        if check_app_status; then
            print_success "Skull King d√©marr√© avec succ√®s"
        else
            print_error "√âchec du d√©marrage"
        fi
        ;;
    stop)
        echo "üõë Arr√™t de Skull King..."
        pm2 stop skullking 2>/dev/null || print_warning "Application d√©j√† arr√™t√©e"
        print_success "Skull King arr√™t√©"
        ;;
    restart)
        echo "üîÑ Red√©marrage de Skull King..."
        cd "$PROJECT_DIR"
        pm2 restart skullking 2>/dev/null || {
            print_warning "Processus non trouv√©, d√©marrage..."
            pm2 start ecosystem.config.js --env production
        }
        pm2 save
        sleep 2
        if check_app_status; then
            print_success "Skull King red√©marr√© avec succ√®s"
        else
            print_error "√âchec du red√©marrage"
        fi
        ;;
    status)
        if check_app_status; then
            print_success "Skull King en ligne"
        else
            print_error "Skull King hors ligne"
        fi
        ;;
    logs)
        echo "üìã Logs de Skull King en temps r√©el (Ctrl+C pour arr√™ter):"
        echo "=========================================================="
        pm2 logs skullking 2>/dev/null || print_error "Impossible d'acc√©der aux logs"
        ;;
    monitor)
        monitor_function
        ;;
    update)
        update_function
        ;;
    deploy)
        echo "üöÄ D√©ploiement complet..."
        cd "$PROJECT_DIR"
        
        # V√©rification et cr√©ation du fichier .env
        print_step "V√©rification de la configuration d'environnement..."
        if [ ! -f ".env" ]; then
            if [ -f ".env.example" ]; then
                print_step "Copie de .env.example vers .env..."
                cp .env.example .env
                print_success "Fichier .env cr√©√© √† partir de .env.example"
            else
                print_warning "Ni .env ni .env.example trouv√©s"
            fi
        else
            print_success "Fichier .env d√©j√† pr√©sent"
        fi
        
        # Arr√™t de l'application
        print_step "Arr√™t de l'application si elle est en cours d'ex√©cution..."
        pm2 stop skullking 2>/dev/null || echo "Application pas encore d√©marr√©e"

        # Installation des d√©pendances
        print_step "Installation des d√©pendances..."
        npm ci --production

        # G√©n√©ration du client Prisma
        print_step "G√©n√©ration du client Prisma..."
        npx prisma generate

        # Build
        print_step "Construction de l'application..."
        npm run build

        # Initialisation de la base de donn√©es
        print_step "Initialisation de la base de donn√©es de production..."
        NODE_ENV=production npx prisma db push

        # D√©marrage avec PM2
        print_step "D√©marrage avec PM2..."
        pm2 start ecosystem.config.js --env production

        # Sauvegarde de la configuration PM2
        print_step "Sauvegarde de la configuration PM2..."
        pm2 save

        # V√©rification finale
        sleep 5
        if check_app_status; then
            print_success "üéâ D√©ploiement termin√© avec succ√®s!"
            print_success "L'application est accessible sur http://localhost:3000"
        else
            print_error "‚ùå Probl√®me lors du d√©ploiement"
        fi
        ;;
    api)
        echo "üè• V√©rification de la sant√© de l'application..."
        if curl -s http://localhost:3000/api/health >/dev/null 2>&1; then
            print_success "API accessible"
            echo "R√©ponse: $(curl -s http://localhost:3000/api/health)"
        else
            print_error "API non accessible"
        fi
        ;;
    reset)
        # V√©rifier si l'option --y ou -y est pr√©sente
        auto_confirm=false
        if [[ "$2" == "--y" ]] || [[ "$2" == "-y" ]]; then
            auto_confirm=true
        fi
        
        echo "üîÑ R√©initialisation compl√®te du projet..."
        echo ""
        echo -e "${YELLOW}‚ö†Ô∏è  ATTENTION: Cette action va supprimer toutes les donn√©es!${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Les utilisateurs, salles de jeu et parties seront perdues!${NC}"
        echo ""
        
        if [ "$auto_confirm" = true ]; then
            echo "Mode automatique activ√© (--y), confirmation ignor√©e"
            confirmation="o"
        else
            echo -n "√ätes-vous s√ªr de vouloir continuer? (O/n): "
            read -n 1 confirmation
            echo ""
        fi
        
        if [[ "$confirmation" =~ ^[Oo]$ ]] || [ -z "$confirmation" ]; then
            cd "$PROJECT_DIR" || {
                print_error "Impossible d'acc√©der au r√©pertoire $PROJECT_DIR"
                exit 1
            }

            # Ex√©cution du script de reset
            print_step "Ex√©cution du script de r√©initialisation..."
            node reset-project.js
            
            if [ $? -eq 0 ]; then
                print_success "R√©initialisation termin√©e avec succ√®s"
                
                sleep 2
                if check_app_status; then
                    print_success "Projet r√©initialis√© et pr√™t √† utiliser"
                fi
            else
                print_error "Erreur lors de la r√©initialisation"
                print_step "Tentative de red√©marrage de l'application..."
                pm2 start skullking 2>/dev/null || pm2 start ecosystem.config.js --env production
            fi
        else
            print_warning "R√©initialisation annul√©e"
        fi
        ;;
    *)
        echo -e "${PURPLE}üè¥‚Äç‚ò†Ô∏è SKULL KING - Script de gestion unifi√©${NC}"
        echo "============================================="
        echo ""
        echo "Usage: sk [commande]"
        echo ""
        echo "Commandes disponibles:"
        echo ""
        echo "  start         - D√©marre l'application"
        echo "  stop          - Arr√™te l'application"
        echo "  restart       - Red√©marre l'application"
        echo "  status        - Affiche le statut d√©taill√©"
        echo "  logs          - Affiche les logs PM2 en temps r√©el"
        echo "  monitor       - Monitoring complet avec ressources syst√®me"
        echo "  deploy        - D√©ploiement complet (deps + build + start)"
        echo "  update        - Mise √† jour compl√®te de l'application"
        echo "  api           - V√©rifie la sant√© de l'API"
        echo "  reset         - R√©initialise compl√®tement le projet (‚ö†Ô∏è SUPPRIME TOUTES LES DONN√âES)"
        echo "                  Options: --y ou -y pour confirmer automatiquement"
        echo ""
        exit 1
        ;;
esac
