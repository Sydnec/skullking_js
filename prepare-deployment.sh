#!/bin/bash

# üöÄ Script de pr√©paration pour le d√©ploiement Vercel
# Ce script pr√©pare votre projet pour un d√©ploiement r√©ussi

set -e

echo "üè¥‚Äç‚ò†Ô∏è Pr√©paration du d√©ploiement Skull King sur Vercel..."
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher des messages color√©s
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier si nous sommes dans le bon dossier
if [ ! -f "package.json" ]; then
    log_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet"
    exit 1
fi

# V√©rifier les d√©pendances
log_info "V√©rification des d√©pendances..."

if ! command -v node &> /dev/null; then
    log_error "Node.js n'est pas install√©"
    exit 1
fi

if ! command -v npm &> /dev/null; then
    log_error "npm n'est pas install√©"
    exit 1
fi

log_success "Node.js et npm d√©tect√©s"

# Installer les d√©pendances
log_info "Installation des d√©pendances..."
npm ci --production=false

# G√©n√©rer le client Prisma
log_info "G√©n√©ration du client Prisma..."
npx prisma generate

# V√©rifier la configuration TypeScript
log_info "V√©rification TypeScript..."
npm run type-check

# Linter le code
log_info "V√©rification du code avec ESLint..."
npm run lint

# Test de build local
log_info "Test de build local..."
npm run build

log_success "Build local r√©ussie !"

# V√©rifier les fichiers critiques
log_info "V√©rification des fichiers de configuration..."

if [ ! -f "vercel.json" ]; then
    log_warning "vercel.json non trouv√© (optionnel)"
else
    log_success "vercel.json trouv√©"
fi

if [ ! -f ".env.example" ]; then
    log_warning ".env.example non trouv√©"
else
    log_success ".env.example trouv√©"
fi

if [ ! -f ".env.production" ]; then
    log_warning ".env.production non trouv√©"
else
    log_success ".env.production trouv√©"
fi

# Nettoyer les fichiers temporaires
log_info "Nettoyage des fichiers temporaires..."
rm -rf .next/cache
rm -rf node_modules/.cache

# V√©rifier .gitignore
log_info "V√©rification du .gitignore..."
if grep -q ".env.local" .gitignore; then
    log_success ".env.local est ignor√© par git"
else
    log_warning ".env.local n'est pas dans .gitignore"
fi

# V√©rifier que les secrets ne sont pas commit√©s
log_info "V√©rification des secrets..."
if grep -r "your-very-secure-session-secret-here" src/ 2>/dev/null; then
    log_error "Secret par d√©faut trouv√© dans le code source !"
    log_error "Remplacez les secrets par d√©faut avant le d√©ploiement"
    exit 1
fi

log_success "Aucun secret par d√©faut trouv√© dans le code"

# Afficher un r√©sum√©
echo ""
log_success "üéâ Pr√©paration termin√©e avec succ√®s !"
echo ""
echo -e "${BLUE}üìã Checklist de d√©ploiement :${NC}"
echo ""
echo "‚úÖ D√©pendances install√©es"
echo "‚úÖ Client Prisma g√©n√©r√©"
echo "‚úÖ TypeScript v√©rifi√©"
echo "‚úÖ Code lint√©"
echo "‚úÖ Build test√©e"
echo "‚úÖ Configuration v√©rifi√©e"
echo ""
echo -e "${YELLOW}üöÄ Prochaines √©tapes :${NC}"
echo ""
echo "1. Commitez vos changements :"
echo -e "   ${GREEN}git add .${NC}"
echo -e "   ${GREEN}git commit -m \"Pr√©paration pour d√©ploiement Vercel\"${NC}"
echo -e "   ${GREEN}git push${NC}"
echo ""
echo "2. Configurez les variables d'environnement sur Vercel :"
echo -e "   ${GREEN}DATABASE_URL${NC} - URL de votre base de donn√©es"
echo -e "   ${GREEN}SESSION_SECRET${NC} - Secret pour les sessions"
echo -e "   ${GREEN}JWT_SECRET${NC} - Secret pour les JWT"
echo -e "   ${GREEN}ALLOWED_ORIGINS${NC} - Domaines autoris√©s"
echo ""
echo "3. D√©ployez sur Vercel :"
echo -e "   ${GREEN}https://vercel.com${NC}"
echo ""
echo -e "${BLUE}üìö Documentation compl√®te : ${GREEN}./DEPLOYMENT.md${NC}"
echo ""

# Proposer d'ouvrir le guide de d√©ploiement
read -p "Voulez-vous ouvrir le guide de d√©ploiement ? (y/N) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    if command -v code &> /dev/null; then
        code DEPLOYMENT.md
    elif command -v open &> /dev/null; then
        open DEPLOYMENT.md
    else
        log_info "Ouvrez manuellement le fichier DEPLOYMENT.md"
    fi
fi

echo ""
echo -e "${GREEN}Bon d√©ploiement ! üè¥‚Äç‚ò†Ô∏è${NC}"
