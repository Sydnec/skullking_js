# Exemple de configuration pour SkullKing

# =============================================================================
# BACKEND (.env dans /backend/)
# =============================================================================

# Base de données PostgreSQL
DATABASE_URL="postgresql://username:password@host:5432/database_name"

# Secret JWT (générez un secret fort et unique)
JWT_SECRET="your_super_strong_random_jwt_secret_here"

# Port du serveur backend
PORT=3001

# Origines autorisées pour CORS (séparez par des virgules)
ALLOWED_ORIGINS="https://your-domain.com,https://www.your-domain.com"

# Environnement
NODE_ENV=production

# =============================================================================
# FRONTEND (.env dans /frontend/)
# =============================================================================

# URL de l'API backend
NEXT_PUBLIC_API_URL="https://api.your-domain.com"

# URL des WebSockets
NEXT_PUBLIC_SOCKET_URL="https://api.your-domain.com"

# Environnement
NODE_ENV=production

# =============================================================================
# RACINE (.env dans /)
# =============================================================================

# Configuration PostgreSQL pour Docker Compose
POSTGRES_USER=skullking_user
POSTGRES_PASSWORD=super_strong_postgresql_password
POSTGRES_DB=skullking_production
POSTGRES_PORT=5432

# Environnement général
NODE_ENV=production

# =============================================================================
# INSTRUCTIONS POUR LA PRODUCTION
# =============================================================================

# 1. Remplacez toutes les valeurs d'exemple par vos vraies valeurs
# 2. Générez un JWT_SECRET fort : openssl rand -hex 32
# 3. Créez une base de données PostgreSQL sécurisée
# 4. Configurez vos domaines dans ALLOWED_ORIGINS et les URLs
# 5. Assurez-vous que les ports correspondent à votre infrastructure
# 6. Ne commitez JAMAIS ces fichiers .env dans votre repository !
